version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: logapp-postgres
    environment:
      POSTGRES_DB: logapp_db
      POSTGRES_USER: logapp_user
      POSTGRES_PASSWORD: logapp_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logapp_user -d logapp_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: logapp-backend
    env_file:
      - ./.env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://logapp_user:logapp_password@postgres:5432/logapp_db
      PORT: 3001
      CLIENT_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Next.js App (Development Mode)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: logapp-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
